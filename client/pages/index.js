import { useEffect, useState, useMemo } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import dynamic from 'next/dynamic'
const Chart = dynamic(() => import('react-apexcharts'), { ssr: false });


const ChartData = {
  series: [],
  options: {
    chart: {
      type: 'candlestick',
      height: 350
    },
    title: {
      text: 'CandleStick Chart',
      align: 'left'
    },
    xaxis: {
      type: 'datetime'
    },
    yaxis: {
      tooltip: {
        enabled: true
      }
    }
  },
};

const round = (num) => {
  // if number is null
  return num ? num.toFixed(2) : null;
}


export default function Home() {
  const [price, setPrice] = useState(-1);
  const [priceTime, setPriceTime] = useState();
  const [prevPrice, setPrevPrice] = useState(-1);

  const [stockData, setStockData] = useState([{
    data: [],
  }]);

  const [stock, setStock] = useState(null);
  const [error, setError] = useState(null);
  const [userInput, setUserInput] = useState('AMD');

  const handleChange = (e) => {
    e.preventDefault();
    setUserInput(e.target.value);
  };

  async function getStock() {
    const res = await fetch(
      `https://query1.finance.yahoo.com/v8/finance/chart/${userInput}`
    );
    return res.json();
  }

  useEffect(() => {
    let timeoutId;
    async function fetchData() {
      try {
        const data = await getStock();
        const _data = data.chart.result[0];
        console.log(_data);
        setPrevPrice(price);
        setPrice(_data.meta.regularMarketPrice);
        const time = new Date(_data.meta.regularMarketTime * 1000);
        setPriceTime(time.toLocaleString());
        const quote = _data.indicators.quote[0];
        const prices = _data.timestamp.map((timestamp, idx) => ({
          x: new Date(timestamp * 1000),
          // o, h , l , c
          y: [quote.open[idx], quote.high[idx], quote.low[idx], quote.close[idx]].map(round)
        }))

        setStockData([{
          data: prices,
        }]);
        timeoutId = setTimeout(fetchData, 5000);
      } catch (e) {
        setError(e);
      }
    }
    timeoutId = setTimeout(fetchData, 5000 * 2);

    return () => {
      clearTimeout(timeoutId);
    };
  }, []);

  const direction = useMemo(
    () => (prevPrice < price ? 'up' : prevPrice > price ? 'down' : 'nochange'),
    [prevPrice, price]
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="#">Stock Tracker</a>
        </h1>
        <style jsx>{`
          .nochange {
            color: brown;
          }
          .up {
            color: green;
          }
          .down {
            color: red;
          }
        `}</style>

        <div className={styles.heroButtons}>
          <input type="search" name="query" onChange={handleChange} required />
          <button
            type="submit"
            onClick={getStock}
            className={styles.from_button}
          >
            Search
          </button>
        </div>

        <div className={styles.grid}>
          <div>
            <h4>{userInput}</h4>
            <p className={styles.description}>
              Market Price
              <code className={[direction].join(' ')}>${price}</code>
              <br /> {priceTime && priceTime}
            </p>
          </div>
        </div>
        <div className={styles.chart}>
          <Chart options={ChartData.options} series={stockData} type="candlestick" height={350} />
          </div>
      </main>
    </div>
  );
}
